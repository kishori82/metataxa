// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// compute_tax_distance
void compute_tax_distance(std::string& tax_file_name);
RcppExport SEXP _metataxa_compute_tax_distance(SEXP tax_file_nameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string& >::type tax_file_name(tax_file_nameSEXP);
    compute_tax_distance(tax_file_name);
    return R_NilValue;
END_RCPP
}
// timesTwo
NumericVector timesTwo(NumericVector x);
RcppExport SEXP _metataxa_timesTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwo(x));
    return rcpp_result_gen;
END_RCPP
}
// myFunction
Rcpp::StringVector myFunction(Rcpp::StringVector x);
RcppExport SEXP _metataxa_myFunction(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(myFunction(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_metataxa_compute_tax_distance", (DL_FUNC) &_metataxa_compute_tax_distance, 1},
    {"_metataxa_timesTwo", (DL_FUNC) &_metataxa_timesTwo, 1},
    {"_metataxa_myFunction", (DL_FUNC) &_metataxa_myFunction, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_metataxa(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
